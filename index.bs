<pre class="metadata">
Title: Loader
Group: WHATWG
H1: Loader
Shortname: loader
Repository: whatwg/loader
Inline Github Issues: true
Level: 1
Status: DREAM
ED: https://whatwg.github.io/loader
Editor: Eric Ferraiuolo, Yahoo https://yahoo.com, edf@ericf.me, https://github.com/ericf
Editor: Dave Herman, Mozilla https://mozilla.org, dherman@mozilla.com, http://calculist.org
Editor: Yehuda Katz, jQuery Foundation https://jquery.org, wycats@gmail.com, http://yehudakatz.com
Editor: Caridy Pati√±o, Yahoo https://yahoo.com, caridy@gmail.com, http://caridy.name
Abstract: This specification describes the behavior of loading JavaScript modules from a
Abstract: JavaScript host environment. It also provides APIs for intercepting the module
Abstract: loading process and customizing loading behavior.
Logo: https://resources.whatwg.org/logo-javascript.svg
!Version History: <a href="https://github.com/whatwg/loader/commits">https://github.com/whatwg/loader/commits</a>
!Participate: <a href="https://github.com/whatwg/loader/issues/new">File an issue</a> (<a href="https://github.com/whatwg/loader/issues?state=open">open issues</a>)

Opaque Elements: emu-alg
</pre>

<style>
  .note + .example, .note + .note { margin-top: 1em; }

  emu-val { font-weight: bold; }
  emu-alg > ol, emu-alg > ol ol ol ol { list-style-type: decimal; }
  emu-alg > ol ol, emu-alg > ol ol ol ol ol { list-style-type: lower-alpha; }
  emu-alg > ol ol ol, emu-alg > ol ol ol ol ol ol { list-style-type: lower-roman; }
  emu-alg li { margin: 0; }
</style>
<script src="https://resources.whatwg.org/file-issue.js" async></script>

<h2 id="status" class="no-num no-toc">Status</h2>

This document is a work in progress and dreams of becoming a living standard.

<h2 id="module-loading">Module Loading</h2>

<p><i>This section is non-normative.</i></p>

<h3 id="intro">Introduction</h3>

Throughout their development, JavaScript modules have been divided into two general areas:

<ul>
<li>The <b>authoring format</b>, which defines the importing and exporting syntax, as well as the semantics for variable bindings and cycles.
<li>The <b>JavaScript Loader</b>, which provides a pipeline for on-demand, asynchronous loading of JavaScript modules.
</ul>

The authoring format was carefully designed to support pre-compilation (like Browserify) and on-demand asynchronous loading (like AMD). It defines the minimal syntax necessary to allow people to write portable modules that can work across different platforms, most notably Node.js and web browsers.

The JavaScript Loader allows host environments, like Node.js and browsers, to fetch and load modules on demand. It provides a hookable pipeline, to allow front-end packaging solutions like Browserify, WebPack and jspm to hook into the loading process.

This division provides a single format that developers can use in all JavaScript environments, and a separate loading mechanism for each environment. For example, a Node Loader would load its modules from the file system, using its own module lookup algorithm, while a Browser Loader would fetch modules and use browser-supplied packaging formats.

JavaScript itself, in ECMAScript 2015, defines the module syntax and the "linking semantics" between modules. When a module is requested, it delegates responsibility for loading the module to the host environment. The Loader defines how host environments can allow JavaScript code to configure that process.

The primary goal is to make as much of this process as possible consistent between Node and Browser environments. For example, if a JavaScript program wants to translate <code>.coffee</code> files to JavaScript on the fly, the Loader defines a "translate" hook that can be used. This allows programs to participate in the loading process, even though some details (specifically, the process of getting a particular module from its host-defined storage) will be different between environments.

<h3 id="pipeline">Loader Pipeline</h3>

<b>TODO:</b> include pipeline diagram

<h2 id="conventions">Conventions</h2>

<h3 id="promises">Promises</h3>

This spec makes heavy use of promises, and adopts the notational conventions established in the promises guide.

<h3 id="shorthand-phrases">Shorthand Phrases</h3>

<h4 id="reject-if-abrupt" aoid="RejectIfAbrupt">RejectIfAbrupt(x)</h4>

Algorithm steps that say

<emu-alg>
1. RejectIfAbrupt(_x_).
</emu-alg>

mean the same thing as:

<emu-alg>
1. If _x_ is an abrupt completion, then return a promise rejected with _x_.[[value]].
1. Else if _x_ is a Completion Record, then let _x_ be _x_.[[value]].
</emu-alg>

<h3 id="common-operations">Common Operations</h3>

<h4 id="create-object" aoid="CreateObject">CreateObject()</h4>

<emu-alg>
1. Let _obj_ be ObjectCreate(%ObjectPrototype%).
1. Return _obj_.
</emu-alg>

<h4 id="simple-define" aoid="SimpleDefine">SimpleDefine(obj, name, value)</h4>

<emu-alg>
1. Let _desc_ be a new PropertyDescriptor record {[[Value]]: _value_, [[Writable]]: *true*, [[Enumerable]]: *true*, [[Configurable]]: *true*}.
1. Return the result of calling OrdinaryDefineOwnProperty(_obj_, _name_, _desc_).
</emu-alg>

<h4 id="get-state-value" aoid="GetStateValue">GetStateValue(state)</h4>

<emu-alg>
1. If _state_ is the string "fetch" return 0.
1. If _state_ is the string "translate" return 1.
1. If _state_ is the string "instantiate" return 2.
1. If _state_ is the string "link" return 3.
1. If _state_ is the string "ready" return 4.
</emu-alg>

<h4 id="set-state-to-max" aoid="SetStateToMax">SetStateToMax(entry, newState)</h4>

<emu-alg>
1. Let _state_ be _entry_.[[State]].
1. Let _stateValue_ be GetStateValue(_state_).
1. Let _newStateValue_ be GetStateValue(_newState_).
1. If _newStateValue_ is larger than _stateValue_, set _entry_.[[State]] to _newState_.
</emu-alg>

<h2 id="loader-object">Loader Object</h2>

A <dfn>loader object</dfn> has the following fields:

<table>
  <thead>
    <tr>
      <th>Internal Slot</th>
      <th>Value Type (<em>non-normative</em>)</th>
      <th>Description (<em>non-normative</em>)</th>
    </tr>
  </thead>
  <tr>
    <td>\[[Realm]]</td>
    <td>Realm Record</td>
    <td>The realm this loader belongs to.</td>
  </tr>
  <tr>
    <td>\[[Registry]]</td>
    <td>List of pairs of String and <a>registry entry</a></td>
    <td>The registry of installed modules.</td>
  </tr>
  <tr>
    <td>\[[Resolve]]</td>
    <td>A function object</td>
    <td>The <code>"resolve"</code> loading hook.</td>
  </tr>
  <tr>
    <td>\[[Fetch]]</td>
    <td>A function object</td>
    <td>The <code>"fetch"</code> loading hook.</td>
  </tr>
  <tr>
    <td>\[[Translate]]</td>
    <td>A function object</td>
    <td>The <code>"translate"</code> loading hook.</td>
  </tr>
  <tr>
    <td>\[[Instantiate]]</td>
    <td>A function object</td>
    <td>The <code>"instantiate"</code> loading hook.</td>
  </tr>
</table>

<h3 id="registry">Module Registry</h3>

A <dfn>registry entry</dfn> is a record with the following fields:

<table>
  <thead>
    <tr>
      <th>Internal Slot</th>
      <th>Value Type (<em>non-normative</em>)</th>
      <th>Description (<em>non-normative</em>)</th>
    </tr>
  </thead>
  <tr>
    <td>\[[Key]]</td>
    <td>String</td>
    <td>The resolved module key.</td>
  </tr>
  <tr>
    <td>\[[State]]</td>
    <td><code>"fetch"</code>, <code>"translate"</code>, <code>"instantiate"</code>, <code>"link"</code>, <code>"ready"</code></td>
    <td>A constant value to indicating which phase the entry is at.</td>
  </tr>
  <tr>
    <td>\[[Metadata]]</td>
    <td>Object or <code>undefined</code></td>
    <td>The metadata object passed through the pipeline.</td>
  </tr>
  <tr>
    <td>\[[Fetch]]</td>
    <td>Promise or <code>undefined</code></td>
    <td>A promise for the result of [[#request-fetch]].</td>
  </tr>
  <tr>
    <td>\[[Translate]]</td>
    <td>Promise or <code>undefined</code></td>
    <td>A promise for the result of [[#request-translate]].</td>
  </tr>
  <tr>
    <td>\[[Instantiate]]</td>
    <td>Promise or <code>undefined</code></td>
    <td>A promise for the result of [[#request-instantiate]].</td>
  </tr>
  <tr>
    <td>\[[Dependencies]]</td>
    <td>List of pairs of String and (<a>registry entry</a> or <code>undefined</code>), or <code>undefined</code>.</td>
    <td>Table mapping unresolved names to their resolved modules.</td>
  </tr>
  <tr>
    <td>\[[Module]]</td>
    <td>Module Record or Function object or <code>undefined</code></td>
    <td>The Module Record if the entry is ready, or a thunk if the entry is delayed; otherwise <code>undefined</code>.</td>
  </tr>
  <tr>
    <td>\[[Error]]</td>
    <td>Any or <b>nothing</b></td>
    <td>An error that was encountered during one of the phases of the loading pipeline; <b>nothing</b> if no error has been encountered.</td>
  </tr>
</table>



<h2 id="pipeline-semantics">Loading Semantics</h2>

<h3 id="auxiliary-operations">Auxiliary Operations</h3>

<h4 id="ensure-registered" aoid="EnsureRegistered">EnsureRegistered(loader, key)</h4>

<emu-alg>
1. Assert: _loader_ has a [[Registry]] internal slot.
1. Let _pair_ be the entry in _loader_.[[Registry]] such that _pair_.[[key]] is equal to _key_.
1. If _pair_ exists, then:
  1. Let _entry_ be _pair_.[[value]].
1. Else:
  1. Let _entry_ be a new registry entry record { [[Key]]: _key_, [[State]]: "fetch", [[Metadata]]: *undefined*, [[Fetch]]: *undefined*, [[Translate]]: *undefined*, [[Instantiate]]: *undefined*, [[Dependencies]]: *undefined*, [[Module]]: *undefined*, [[Error]]: *nothing* }.
  1. Append { [[key]]: _key_, [[value]]: _entry_ } to _loader_.[[Registry]].
1. Return _entry_.
</emu-alg>

<h4 id="resolve" aoid="Resolve">Resolve(loader, name, referrer)</h4>

<emu-alg>
1. Let _hook_ be _loader_.[[Resolve]].
1. Return the result of promise-calling _hook_(_name_, _referrer_).
</emu-alg>

<h4 id="fulfill-fetch" aoid="FulfillFetch">FulfillFetch(loader, entry, payload)</h4>

<emu-alg>
1. If _entry_.[[Fetch]] is *undefined*, then set _entry_.[[Fetch]] to a new promise.
1. Fulfill _entry_.[[Fetch]] with _payload_.
1. SetStateToMax(_entry_, "translate").
</emu-alg>

<h4 id="fulfill-translate" aoid="FulfillTranslate">FulfillTranslate(loader, entry, source)</h4>

<emu-alg>
1. If _entry_.[[Translate]] is *undefined*, then set _entry_.[[Translate]] to a new promise.
1. Fulfill _entry_.[[Translate]] with _source_.
1. SetStateToMax(_entry_, "instantiate").
</emu-alg>

<h4 id="fulfill-instantiate" aoid="FulfillInstantiate">FulfillInstantiate(loader, entry, optionalInstance, source)</h4>

<emu-alg>
1. If _entry_.[[Instantiate]] is *undefined*, then set _entry_.[[Instantiate]] to a new promise.
1. CommitInstantiated(_loader_, _entry_, _optionalInstance_, _source_).
1. Fulfill _entry_.[[Instantiate]] with _entry_.
</emu-alg>

<h4 id="commit-instantiated" aoid="CommitInstantiated">CommitInstantiated(loader, entry, optionalInstance, source)</h4>

<emu-alg>
1. Let _instance_ be Instantiation(_loader_, _optionalInstance_, _source_).
1. ReturnIfAbrupt(_instance_).
1. // TODO: edge case: what if _instance_ is a thenable function?
1. Let _deps_ be a new empty List.
1. If _instance_ is a Module Record, then:
  1. Assert: _instance_ is a Source Text Module Record.
  1. Set _instance_.[[RegistryEntry]] to _entry_.
  1. For each _dep_ in _instance_.[[RequestedModules]], do:
    1. Append the record { [[key]]: _dep_, [[value]]: *undefined* } to _deps_.
1. Set _entry_.[[Dependencies]] to _deps_.
1. Set _entry_.[[Module]] to _instance_.
1. SetStateToMax(_entry_, "link").
</emu-alg>

<h4 id="instantiation" aoid="Instantiation">Instantiation(loader, result, source)</h4>

<emu-alg>
1. If _result_ is *undefined*, then return ParseModule(_source_).
1. If IsCallable(_result_) is *false* then throw a new TypeError.
1. Set _result_.[[Realm]] to _loader_.[[Realm]].
1. Return _result_.
</emu-alg>

<h3 id="loading-operations">Loading Operations</h3>

<h4 id="request-fetch" aoid="RequestFetch">RequestFetch(loader, key)</h4>

<emu-alg>
1. Let _entry_ be EnsureRegistered(_loader_, _key_).
1. Let _stateValue_ be GetStateValue(_entry_.[[State]]).
1. Let _linkStateValue_ be GetStateValue("link").
1. If _stateValue_ is greater than _linkStateValue_, return a new error promise.
1. If _entry_.[[Fetch]] is not *undefined*, return _entry_.[[Fetch]].
1. Let _hook_ be _loader_.[[Fetch]].
1. // TODO: metadata object
1. Let _p0_ be the result of promise-calling _hook_(_key_).
1. Let _p_ be the result of transforming _p0_ with a fulfillment handler that, when called with argument _payload_, runs the following steps:
  1. SetStateToMax(_entry_, "translate").
  1. Return _payload_.
1. Set _entry_.[[Fetch]] to _p_.
1. Return _p_.
</emu-alg>

<h4 id="request-translate" aoid="RequestTranslate">RequestTranslate(loader, key)</h4>

<emu-alg>
1. Let _entry_ be EnsureRegistered(_loader_, _key_).
1. Let _stateValue_ be GetStateValue(_entry_.[[State]]).
1. Let _linkStateValue_ be GetStateValue("link").
1. If _stateValue_ is greater than _linkStateValue_, return a new error promise.
1. If _entry_.[[Translate]] is not *undefined*, return _entry_.[[Translate]].
1. Let _hook_ be _loader_.[[Translate]].
1. Let _p_ be the result of transforming RequestFetch(_loader_, _key_) with a fulfillment handler that, when called with argument _payload_, runs the following steps:
  1. // TODO: metadata
  1. Let _p1_ be the result of promise-calling _hook_(_key_, _payload_).
  1. Return the result of transforming _p1_ with a fulfillment handler that, when called with argument _source_, runs the following steps:
    1. SetStateToMax(_entry_, "instantiate").
    1. Return _source_.
1. Set _entry_.[[Translate]] to _p_.
1. Return _p_.
</emu-alg>

<h4 id="request-instantiate" aoid="RequestInstantiate">RequestInstantiate(loader, key)</h4>

<emu-alg>
1. Let _entry_ be EnsureRegistered(_loader_, _key_).
1. If _entry_.[[State]] is "ready", return a new error promise.
1. If _entry_.[[Instantiate]] is not *undefined*, return _entry_.[[Instantiate]].
1. Let _hook_ be _loader_.[[Instantiate]].
1. Let _p_ be the result of transforming RequestTranslate(_loader_, _key_) with a fulfillment handler that, when called with argument _source_, runs the following steps:
  1. // TODO: metadata
  1. Let _p1_ be the result of promise-calling _hook_(_key_, _source_).
  1. Return the result of transforming _p1_ with a fulfillment handler that, when called with argument _optionalInstance_, runs the following steps:
    1. Let _status_ be CommitInstantiated(_loader_, _entry_, _optionalInstance_, _source_).
    1. ReturnIfAbrupt(_status_).
    1. Return _entry_.
1. Set _entry_.[[Instantiate]] to _p_.
1. Return _p_.
</emu-alg>

<h4 id="request-instantiate-all" aoid="RequestInstantiateAll">RequestInstantiateAll(loader, key)</h4>

<emu-alg>
1. Return the result of transforming RequestInstantiate(_loader_, _key_) with a fulfillment handler that, when called with argument _entry_, runs the following steps:
  1. Let _depLoads_ be a new empty List.
  1. For each _pair_ in _entry_.[[Dependencies]], do:
    1. Let _p_ be the result of transforming Resolve(_loader_, _pair_.[[key]], _key_) with a fulfillment handler that, when called with value _depKey_, runs the following steps:
      1. Let _depEntry_ be EnsureRegistered(_loader_, _depKey_).
      1. If _depEntry_.[[State]] is "ready", then:
        1. Let _dep_ be _depEntry_.[[Module]].
        1. Set _pair_.[[value]] to _dep_.
        1. Return _dep_.
      1. Return the result of transforming RequestInstantiateAll(_loader_, _depKey_) with a fulfillment handler that, when called with value _dep_, runs the following steps:
        1. Set _pair_.[[value]] to _dep_.
        1. Return _dep_.
    1. Append _p_ to _depLoads_.
  1. Let _p_ be the result of waiting for all _depLoads_.
  1. Return the result of transforming _p_ with a fulfillment handler that, when called, runs the following steps:
    1. Return _entry_.
</emu-alg>

<h4 id="request-link" aoid="RequestLink">RequestLink(loader, key)</h4>

<emu-alg>
1. Let _entry_ be EnsureRegistered(_loader_, _key_).
1. If _entry_.[[State]] is "ready", return a new promise fulfilled with _entry_.[[Module]].
1. Return the result of transforming RequestInstantiateAll(_loader_, _key_) with a fulfillment handler that, when called with argument _entry_, runs the following steps:
  1. Assert: _entry_'s whole dependency graph is in "link" state.
  1. Let _status_ be Link(_loader_, _entry_).
  1. ReturnIfAbrupt(_status_).
  1. Assert: _entry_'s whole dependency graph is in "ready" state.
  1. Return _entry_.
</emu-alg>

<h4 id="request-ready" aoid="RequestReady">RequestReady(loader, key)</h4>

<emu-alg>
1. Return the result of transforming RequestLink(_loader_, _key_) with a fulfillment handler that, when called with argument _entry_, runs the following steps:
  1. Let _module_ be _entry_.[[Module]].
  1. Let _status_ be _module_.ModuleEvaluation().
  1. ReturnIfAbrupt(_status_).
  1. Return _module_.
</emu-alg>


<h2 id="linking-semantics">Linking Semantics</h2>

<h3 id="resolving-dependencies">Resolving Dependencies</h3>

<h4 id="host-resolve-imported-module" aoid="HostResolveImportedModule">HostResolveImportedModule(module, requestName)</h4>

The modules spec should only invoke this operation from methods of Source Text Module Records, and this spec does not invoke the operation at all.

<emu-alg>
1. Assert: _module_ is a Source Text Module Record.
1. Let _entry_ be _module_.[[RegistryEntry]].
1. Assert: _entry_ is in "link" or "ready" state.
1. Let _pair_ be the pair in _entry_.[[Dependencies]] such that _pair_.[[key]] is equal to _requestName_.
1. Assert: _pair_ is defined.
1. Let _dep_ be _pair_.[[value]].
1. Let _stateValue_ be GetStateValue(_dep_.[[State]]).
1. Let _linkStateValue_ be GetStateValue("link").
1. Assert: _stateValue_ is greater than or equal to _linkStateValue_.
1. Return _dep_.[[Module]].
</emu-alg>


<h3 id="linking">Linking</h3>

<h4 id="link" aoid="Link">Link(loader, root)</h4>

<emu-alg>
1. Assert: _root_ is a registry entry record in "link" state.
1. Let _deps_ be DependencyGraph(_root_).
1. For each _dep_ in _deps_, do:
  1. If _dep_.[[State]] is "link" and _dep_.[[Module]] is a Function object, then:
    1. Let _f_ be _dep_.[[Module]].
    1. Let _m_ be _f_().
    1. ReturnIfAbrupt(_m_).
    1. Set _dep_.[[Module]] to _m_.
    1. Set _dep_.[[State]] to "ready".
1. Assert: the following sequence is guaranteed not to run any user code.
1. For each _dep_ in _deps_, do:
  1. If _dep_.[[State]] is "link", then:
    1. Let _module_ be _dep_.[[Module]].
    1. Assert: _module_ is a Module Record.
    1. Let _status_ be _module_.ModuleDeclarationInstantiation().
    1. ReturnIfAbrupt(_status_).
    1. Set _dep_.[[State]] to "ready".
1. Return *undefined*.
</emu-alg>

<h4 id="dependency-graph" aoid="DependencyGraph">DependencyGraph(root)</h4>

<emu-alg>
1. Let _result_ be a new empty List.
1. Call ComputeDependencyGraph(_root_, _result_).
1. Return _result_.
</emu-alg>

<h4 id="compute-dependency-graph" aoid="ComputeDependencyGraph">ComputeDependencyGraph(entry, result)</h4>

<emu-alg>
1. If _entry_ is already in _result_, then return *undefined*.
1. Append _entry_ to _result_.
1. For each _pair_ in _entry_.[[Dependencies]], do:
  1. Assert: _pair_.[[value]] is defined.
  1. Call ComputeDependencyGraph(_pair_.[[value]], _result_).
1. Return *undefined*.
</emu-alg>


<h2 id="api">API</h2>

<h3 id="loading-api">Importing</h3>

<h4 id="reflect-loader-import">Reflect.Loader.import(name[, referrer])</h4>

<emu-alg>
1. Let _loader_ be *this* value.
1. If Type(_loader_) is not Object, throw a TypeError exception.
1. If _loader_ does not have a [[Registry]] internal slot throw a *TypeError* exception.
1. Return the result of transforming Resolve(_loader_, _name_, _referrer_) with a fulfillment handler that, when called with argument _key_, runs the following steps:
  1. Return RequestReady(_loader_, _key_).
</emu-alg>


<h3 id="resolution-api">Resolution</h3>

<h4 id="reflect-load-resolve">Reflect.Loader.resolve(name[, referrer])</h4>

<emu-alg>
1. Let _loader_ be *this* value.
1. If Type(_loader_) is not Object, throw a TypeError exception.
1. If _loader_ does not have a [[Registry]] internal slot throw a *TypeError* exception.
1. Return Resolve(_loader_, _name_, _referrer_).
</emu-alg>


<h3 id="request-api">Requests</h3>

<h4 id="reflect-loader-load">Reflect.Loader.load(key[, stage])</h4>

<emu-alg>
1. Let _loader_ be *this* value.
1. If Type(_loader_) is not Object, throw a TypeError exception.
1. If _loader_ does not have a [[Registry]] internal slot throw a *TypeError* exception.
1. If _stage_ is *undefined* then let _stage_ be "ready".
1. If _stage_ is "fetch", then:
  1. Return RequestFetch(_loader_, _key_).
1. If _stage_ is "translate", then:
  1. Return RequestTranslate(_loader_, _key_).
1. If _stage_ is "instantiate", then:
  1. Return the result of transforming RequestInstantiateAll(_loader_, _key_) with a fulfillment handler that, when called with argument _entry_, runs the following steps:
    1. If _entry_.[[Module]] is a Function object, return _entry_.[[Module]].
    1. Return *undefined*.
1. If _stage_ is "link", then:
  1. Return the result of transforming RequestLink(_loader_, _key_) with a fulfillment handler that returns *undefined*.
1. If _stage_ is "ready", then:
  1. Return the result of transforming RequestReady(_loader_, _key_) with a fulfillment handler that, when called with argument _entry_, runs the following steps:
    1. Return GetModuleNamespace(_entry_.[[Module]]).
1. Throw a new TypeError.
</emu-alg>


<h3 id="response-api">Responses</h3>

<h4 id="reflect-loader-provide">Reflect.Loader.provide(key, stage, value)</h4>

<emu-alg>
1. Let _loader_ be *this* value.
1. If Type(_loader_) is not Object, throw a *TypeError* exception.
1. If _loader_ does not have a [[Registry]] internal slot throw a *TypeError* exception.
1. Let _entry_ be EnsureRegistered(_loader_, _key_).
1. If _stage_ is "fetch", then:
  1. Let _stateValue_ be GetStateValue(_entry_.[[State]]).
  1. Let _fetchStateValue_ be GetStateValue("fetch").
  1. If _stateValue_ is greater than _fetchStateValue_, throw a new TypeError.
  1. Call FulfillFetch(_loader_, _entry_, _value_).
  1. Return *undefined*.
1. If _stage_ is "translate", then:
  1. Let _stateValue_ be GetStateValue(_entry_.[[State]]).
  1. Let _translateStateValue_ be GetStateValue("translate").
  1. If _stateValue_ is greater than _translateStateValue_, throw a new TypeError.
  1. Call FulfillFetch(_loader_, _entry_, *undefined*).
  1. Call FulfillTranslate(_loader_, _entry_, _value_).
  1. Return *undefined*.
1. If _stage_ is "instantiate", then:
  1. Let _stateValue_ be GetStateValue(_entry_.[[State]]).
  1. Let _instantiateStateValue_ be GetStateValue("instantiate").
  1. If _stateValue_ is greater than _instantiateStateValue_, throw a new TypeError.
  1. Call FulfillFetch(_loader_, _entry_, *undefined*).
  1. Call FulfillTranslate(_loader_, _entry_, *undefined*).
  1. Assert: _entry_.[[Translate]] is resolved or rejected.
  1. TODO: need to propagate rejections
  1. Let _source_ be the fulfillment value of _entry_.[[Translate]].
  1. Call FulfillInstantiate(_loader_, _entry_, _value_, _source_).
  1. Return *undefined*.
1. Throw a new TypeError.
</emu-alg>

<h4 id="reflect-loader-error">Reflect.Loader.error(key, stage, value)</h4>

<emu-alg>
1. // TODO
</emu-alg>


<h3 id="registry-api">Registry</h3>

<h4 id="reflect-loader-lookup">Reflect.Loader.lookup(key)</h4>

<emu-alg>
1. Let _loader_ be *this* value.
1. If Type(_loader_) is not Object, throw a *TypeError* exception.
1. If _loader_ does not have a [[Registry]] internal slot throw a *TypeError* exception.
1. Let _pair_ be the entry in _loader_.[[Registry]] such that _pair_.[[key]] is equal to _key_.
1. If _pair_ does not exist, then return *null*.
1. Let _entry_ be _pair_.[[value]].
1. Let _result_ be CreateObject().
1. Call SimpleDefine(_result_, "state", _entry_.[[State]]).
1. If _entry_.[[Fetch]] is *undefined* then let _fetch_ be *undefined*.
1. Else let _fetch_ be the result of transforming _entry_.[[Fetch]] with a new pass-through promise.
1. Call SimpleDefine(_result_, "fetch", _fetch_).
1. If _entry_.[[Translate]] is *undefined*, then let _translate_ be *undefined*.
1. Else let _translate_ be the result of transforming _entry_.[[Translate]] with a new pass-through promise.
1. Call SimpleDefine(_result_, "translate", _translate_).
1. If _entry_.[[Instantiate]] is *undefined*, then let _instantiate_ be *undefined*.
1. Else let _instantiate_ be the result of transforming _entry_.[[Instantiate]] with a fulfillment handler that, when called with argument _entry_, runs the following steps:
  1. If _entry_.[[Module]] is a Function object, then return _entry_.[[Module]].
  1. Return *undefined*.
1. Call SimpleDefine(_result_, "instantiate", _instantiate_).
1. If _entry_.[[State]] is "ready" then let _module_ be _entry_.[[Module]].
1. Else let _module_ be *undefined*.
1. Call SimpleDefine(_result_, "module", _module_).
1. If _entry_.[[Error]] is *nothing*, then:
  1. Call SimpleDefine(_result_, "error", *null*).
1. Else:
  1. Let _opt_ be CreateObject().
  1. Call SimpleDefine(_opt_, "value", _entry_.[[Error]]).
  1. Call SimpleDefine(_result_, "error", _opt_).
1. Return _result_.
</emu-alg>

<h4 id="reflect-loader-install">Reflect.Loader.install(key, module)</h4>

<emu-alg>
1. Let _loader_ be *this* value.
1. If Type(_loader_) is not Object, throw a *TypeError* exception.
1. If _loader_ does not have a [[Registry]] internal slot throw a *TypeError* exception.
1. Let _pair_ be the entry in _loader_.[[Registry]] such that _pair_.[[key]] is equal to _key_.
1. If _pair_ exists, then throw a new TypeError.
1. Let _entry_ be a new registry entry record { [[Key]]: _key_, [[State]]: "ready", [[Metadata]]: *undefined*, [[Fetch]]: *undefined*, [[Translate]]: *undefined*, [[Instantiate]]: *undefined*, [[Dependencies]]: *undefined*, [[Module]]: _module_ }.
1. Append { [[key]]: _key_, [[value]]: _entry_ } to _loader_.[[Registry]].
</emu-alg>

<h4 id="reflect-loader-uninstall">Reflect.Loader.uninstall(key)</h4>

<emu-alg>
1. Let _loader_ be *this* value.
1. If Type(_loader_) is not Object, throw a *TypeError* exception.
1. If _loader_ does not have a [[Registry]] internal slot throw a *TypeError* exception.
1. Let _pair_ be the entry in _loader_.[[Registry]] such that _pair_.[[key]] is equal to _key_.
1. If _pair_ does not exist, then throw a new TypeError.
1. Let _stateValue_ be GetStateValue(_pair_.[[value]].[[State]]).
1. Let _linkStateValue_ be GetStateValue("link").
1. If _stateValue_ is less than _linkStateValue_, then throw a new TypeError.
1. Remove _pair_ from _loader_.[[Registry]].
</emu-alg>

<h4 id="reflect-loader-cancel">Reflect.Loader.cancel(key)</h4>

<emu-alg>
1. Let _loader_ be *this* value.
1. If Type(_loader_) is not Object, throw a *TypeError* exception.
1. If _loader_ does not have a [[Registry]] internal slot throw a *TypeError* exception.
1. Let _pair_ be the entry in _loader_.[[Registry]] such that _pair_.[[key]] is equal to _key_.
1. If _pair_ does not exist, then throw a new TypeError.
1. Let _entry_ be _pair_.[[value]].
1. Let _stateValue_ be GetStateValue(_entry_.[[State]]).
1. Let _linkStateValue_ be GetStateValue("link").
1. If _stateValue_ is greater than or equal to _linkStateValue_, throw a new TypeError.
1. Remove _pair_ from _loader_.[[Registry]].
</emu-alg>


<h3 id="loading-hooks">Pipeline Intercession</h3>

<h4 id="reflect-load-hook">Reflect.Loader.hook(name[, value])</h4>

<b>TODO:</b>
<ul>
    <li><code>Reflect.Loader.hook("resolve"[, resolve])</code>
    <li><code>Reflect.Loader.hook("fetch"[, fetch])</code>
    <li><code>Reflect.Loader.hook("translate"[, translate])</code>
    <li><code>Reflect.Loader.hook("instantiate"[, instantiate])</code>
</ul>

<h3 id="module-reflection-api">Module Reflection</h3>

<b>TODO:</b> way to force evaluation of a module namespace exotic object (<code>Reflect.Module.evaluate(m)</code>? <code>m[Reflect.Module.evaluate]()</code>?)

<h4 id="reflective-module-record">Reflective Module Records</h4>

A <dfn>reflective module record</dfn> is a kind of module record. It extends

<table>
  <thead>
    <tr>
      <th>Internal Slot</th>
      <th>Value Type (<em>non-normative</em>)</th>
      <th>Description (<em>non-normative</em>)</th>
    </tr>
  </thead>
  <tr>
    <td>\[[LocalExports]]</td>
    <td>A List of Strings</td>
    <td>The set of exported names stored in this module's environment.</td>
  </tr>
  <tr>
    <td>\[[IndirectExports]]</td>
    <td>A List of pairs of String and {\[[module]]: Module Record, \[[bindingName]]: String}.</td>
    <td>The set of re-exported bindings. This ensures that ResolveExport can fully resolve re-exports.</td>
  </tr>
  <tr>
    <td>\[[Evaluate]]</td>
    <td>A function object or <code>undefined</code></td>
    <td>A thunk to call when the the module is evaluated, or <code>undefined</code> if the module is already evaluated.</td>
  </tr>
</table>

<h5 id="reflective-get-export-names" aoid="GetExportNames">Reflective Module.GetExportNames(exportStarStack)</h5>

<emu-alg>
1. Let _module_ be this Reflective Module Record.
1. Let _exports_ be a new empty List.
1. For each _name_ in _module_.[[LocalExports]], do:
  1. Append _name_ to _exports_.
1. For each _pair_ in _module_.[[IndirectExports]], do:
  1. Append _pair_.[[key]] to _exports_.
1. Return _exports_.
</emu-alg>

<h5 id="reflective-resolve-export" aoid="ResolveExport">Reflective Module.ResolveExport(exportName, resolveStack, exportStarStack)</h5>

<emu-alg>
1. Let _module_ be this Reflective Module Record.
1. If _resolveStack_ contains a record _r_ such that _r_.[[module]] is equal to _module_ and _r_.[[exportName]] is equal to _exportName_, then
  1. Assert: this is a circular import request.
  1. Throw a SyntaxError exception.
1. Append the record {[[module]]: _module_, [[exportName]]: _exportName_} to _resolveStack_.
1. Let _exports_ be _module_.[[LocalExports]].
1. Let _pair_ be the pair in _exports_ such that _pair_.[[key]] is equal to _exportName_.
1. If _pair_ is defined, then:
  1. Return the Record { [[module]]: _module_, [[bindingName]]: _exportName_ }.
1. Let _exports_ be _module_.[[IndirectExports]].
1. Let _pair_ be the pair in _exports_ such that _pair_.[[key]] is equal to _exportName_.
1. If _pair_ is defined, then return _pair_.[[value]].
1. Return *null*.
</emu-alg>

<h5 id="reflective-instantiate" aoid="ModuleDeclarationInstantiation">Reflective Module.ModuleDeclarationInstantiation()</h5>

Reflective modules are always already instantiated.

<emu-alg>
1. Return *undefined*.
</emu-alg>

<h5 id="reflective-evaluate" aoid="ModuleEvaluation">Reflective Module.ModuleEvaluation()</h5>

<emu-alg>
1. Let _module_ be this Reflective Module Record.
1. Let _evaluate_ be _module_.[[Evaluate]].
1. Set _module_.[[Evaluate]] to *undefined*.
1. Return _evaluate_().
</emu-alg>

<h4 id="parse-exports-descriptors" aoid="ParseExportsDescriptors">ParseExportsDescriptors(obj)</h4>

<b>TODO:</b> parse as in <a href="https://gist.github.com/dherman/fbf3077a2781df74b6d8">these examples</a>
<ul>
  <li>uninitialized, mutable: <code>{ }</code>
  <li>uninitialized, immutable: <code>{ const: true }</code>
  <li>initialized, mutable: <code>{ value: 42 }</code>
  <li>initialized, immutable: <code>{ value: 42, const: true }</code>
  <li>re-export (immutable): <code>{ module: m, import: "foo" }</code>
</ul>

<emu-alg>
1. // TODO: spec me
</emu-alg>

<h4 id="create-module-mutator" aoid="CreateModuleMutator">CreateModuleMutator(module)</h4>

<emu-alg>
1. // TODO: spec me
</emu-alg>

<h4 id="reflect-module">Reflect.Module(descriptors[, executor, evaluate])</h4>

<emu-alg>
1. Let _realm_ be the current Realm.
1. Let _env_ be NewModuleEnvironment(_realm_.[[globalEnv]]).
1. Let _exportDescriptors_ be ParseExportsDescriptors(_descriptors_). // TODO: interleave the subsequent loop with parsing?
1. Let _localExports_ be a new empty List.
1. Let _indirectExports_ be a new empty List.
1. Let _exportNames_ be a new empty List.
1. Let _envRec_ be _env_'s environment record.
1. For each _desc_ in _exportDescriptors_, do:
  1. Let _exportName_ be _desc_.[[Name]].
  1. Append _exportName_ to _exportNames_.
  1. If _desc_ is an Indirect Export Descriptor, then:
    1. Let _otherMod_ be _desc_.[[Module]].
    1. Let _resolution_ be _otherMod_.ResolveExport(_desc_.[[Import]], ¬´ ¬ª).
    1. ReturnIfAbrupt(_resolution_).
    1. If _resolution_ is *null*, then throw a SyntaxError exception.
    1. Append the record {[[key]]: _exportName_, [[value]]: _resolution_} to _indirectExports_.
  1. Else:
    1. Append _exportName_ to _localExports_.
    1. If _desc_ is an Immutable Export Descriptor, then:
      1. Let _status_ be _envRec_.CreateImmutableBinding(_exportName_, *true*).
      1. Assert: _status_ is not an abrupt completion.
    1. Else:
      1. Assert: _desc_ is a Mutable Export Descriptor.
      1. Let _status_ be _envRec_.CreateMutableBinding(_exportName_, *false*).
      1. Assert: _status_ is not an abrupt completion.
    1. If _desc_.[[Initialized]] is *true*, then:
      1. Call _envRec_.InitializeBinding(_exportName_, _desc_.[[Value]]).
1. If _evaluate_ is *undefined*, then let _evaluated_ be *true*. Otherwise let _evaluated_ be *false*.
1. Let _mod_ be a new Reflective Module Record {[[Realm]]: _realm_, [[Environment]]: _env_, [[Namespace]]: *undefined*, [[Evaluated]]: _evaluated_, [[LocalExports]]: _localExports_, [[IndirectExports]]: _indirectExports_, [[Evaluate]]: _evaluate_}.
1. Let _ns_ be ModuleNamespaceCreate(_mod_, _realm_, _exportNames_).
1. Set _mod_.[[Namespace]] to _ns_.
1. If _executor_ is not *undefined*, then
  1. Let _mutator_ be CreateModuleMutator(_mod_).
  1. Let _status_ be _executor_(_mutator_, _ns_).
  1. ReturnIfAbrupt(_status_).
1. Return _ns_.
</emu-alg>

<h2 id="local">Local Loading</h2>

<b>TODO:</b>

<ul>
<li>syntax for accessing module local information: <code>import local from this;</code>
<li>dynamic import: <code>local.import()</code>
<li>extending the hooks to handle <code>this</code>
<li>debugging info
<li>room for host environment-specific data
</ul>


<h2 id="browser">Browser Loader</h2>

<h3 id="browser-site-packages">Site Packages</h3>

The browser loader contains extra properties for storing <dfn>site packages</dfn>, an application-global set of globally available packages. These map in an internal table to unique URLs that in turn serve as keys in the module registry.

<div class="note">
<p>
The site package system serves as a simple coordination mechanism for modest-sized applications, but it does not provide all functionality required of a full-fledged package management system. It is expected that development ecosystems will build around package management tools that deal with requirements outside the scope of this specification, such as version management and allowing multiple versions of a library to coexist with the same name.
</p>

<p>
Tools that preprocess JavaScript source code may choose to use or ignore the site package table. For example, a package manager may choose to preprocess two separate import statements requiring <code>"jquery"</code> to <code>"jquery/1.9"</code> and <code>"jquery/2.1.1"</code> respectively, based on configuration files informing the tool of version requirements. The tool would then store both versions of jQuery in the site package table using the longer names. Alternatively, the tool may choose to preprocess the imports directly as URLs and bypass the site package system altogether.
</p>
</div>

The browser loader has an extra internal slot:

<table>
  <thead>
    <tr>
      <th>Internal Slot</th>
      <th>Description (<em>non-normative</em>)</th>
    </tr>
  </thead>
  <tr>
    <td>\[[Site]]</td>
    <td>A table that maps package names to URLs.</td>
  </tr>
</table>

<h4 id="reflect-loader-site">Reflect.Loader.site( mappings )</h4>

<div class="example">
  <pre>
    Reflect.Loader.site({
      "jquery":     "https://cdn.example.com/jquery/v/2.1.1",
      "underscore": "https://cdn.example.com/underscore/v/1.7.0",
      "moment":     "https://cdn.example.com/moment/v/2.8.3"
    });
  </pre>
</div>

<h4 id="reflect-loader-site-get">Reflect.Loader.site.get( name )</h4>

<div class="example">
  <pre>
    var url = Reflect.Loader.site.get("jquery");
  </pre>
</div>

<h4 id="reflect-loader-site-set">Reflect.Loader.site.set( name, url )</h4>

<div class="example">
  <pre>
    Reflect.Loader.site.set("jquery", "https://cdn.example.com/jquery/v/2.1.1");
  </pre>
</div>

<h4 id="reflect-loader-site-has">Reflect.Loader.site.has( name )</h4>

<div class="example">
  <pre>
    if (!Reflect.Loader.site.has("jquery")) {
      Reflect.Loader.site.set("jquery", "https://cdn.example.com/jquery/v/2.1.1");
    }
  </pre>
</div>

<h4 id="reflect-loader-site-delete">Reflect.Loader.site.delete( name )</h4>

<div class="example">
  <pre>
    Reflect.Loader.site.delete("jquery");
  </pre>
</div>

<h3 id="browser-resolve">Resolve</h3>

<b>TODO:</b> name resolution policy
<ul>
  <li>relative and site-relative URLs: <code>"./utils.js"</code>, <code>"/scripts/utils.js"</code>
  <li>JS standard modules: <code>"std/math"</code>, <code>"std/json"</code>, <code>"std/reflect"</code>
  <li>Web standard modules: <code>"web/worker"</code>, <code>"web/audio"</code>
  <li>absolute URLs: <code>"https://cdn.example.com/jquery/v/2.0"</code>
  <li>top-level packages consult \[[Site]]: <code>"jquery"</code>, <code>"ember/data"</code>
</ul>

<!--
<h3 id="browser-locate">Locate</h3>

<b>TODO:</b> no-op.
-->

<h3 id="browser-fetch">Fetch</h3>

<b>TODO:</b>
<ul>
  <li>reference fetch standard
  <li>cross-origin produces an opaque object as in ServiceWorker
  <li>CORS, CSP
  <li>other kinds of web assets
</ul>

<h3 id="browser-translate">Translate</h3>

<b>TODO:</b> no-op.

<h3 id="browser-instantiate">Instantiate</h3>

<b>TODO:</b>
<ul>
  <li>basically a no-op.
  <li>but also needs to re-absorb opaque responses.
</ul>
